package vn.com.kodergang.shop.controller;import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpHeaders;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.security.access.prepost.PreAuthorize;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.web.bind.annotation.*;import vn.com.kodergang.shop.Constant;import vn.com.kodergang.shop.entity.AdUser;import vn.com.kodergang.shop.entity.MessagesResponse;import vn.com.kodergang.shop.service.AdUserService;import java.util.Date;import java.util.Map;@RestController@CrossOrigin(origins = "*")@RequestMapping("/" + Constant.API_PATH.AD_USER)public class AdUserController {    Logger logger = LogManager.getLogger(getClass());    @Autowired    AdUserService service;    @RequestMapping(value = {"/deActive"}, method = RequestMethod.POST)    @PreAuthorize("apiSecured(#headers, '" + Constant.PERMISSION.ADMIN + "', '" + Constant.PRIVILEGE.ADMIN+ "')")    public @ResponseBody    ResponseEntity<?> deActive(@RequestHeader HttpHeaders headers, @RequestBody AdUser data) {        logger.info(" user: "                + SecurityContextHolder.getContext().getAuthentication().getName() + Constant.LOG.BEGIN);        MessagesResponse mess = new MessagesResponse();        try {            if (!service.exists(data.getUserId())) {                mess.setCode(Constant.RESPONSE_CODE.NOT_EXISTS);                mess.setStatus(Constant.RESPONSE_STATUS.ERROR);                return new ResponseEntity(mess, HttpStatus.OK);            }            data.setUpdateTime(new Date());            service.save(data);            return new ResponseEntity(mess, HttpStatus.OK);        } catch (Exception e) {            logger.error(e.getMessage(), e);            return new ResponseEntity(mess.error(e), HttpStatus.OK);        } finally {            logger.info(" user: "                    + SecurityContextHolder.getContext().getAuthentication().getName() + Constant.LOG.END);        }    }    @RequestMapping(value = {"/insert"}, method = RequestMethod.POST)    @PreAuthorize("apiSecured(#headers, '" + Constant.PERMISSION.ADMIN + "', '" + Constant.PRIVILEGE.ADMIN + "')")    public @ResponseBody    ResponseEntity<?> insert(@RequestHeader HttpHeaders headers, @RequestBody AdUser data) {        logger.info(" user: "                + SecurityContextHolder.getContext().getAuthentication().getName() + Constant.LOG.BEGIN);        MessagesResponse mess = new MessagesResponse();        try {            if (service.existsEmail(data.getEmail(), data.getUsername())) {                mess.setCode(Constant.RESPONSE_CODE.DUPLICATE_EMAIL);                mess.setStatus(Constant.RESPONSE_STATUS.ERROR);                return new ResponseEntity(mess, HttpStatus.OK);            }            if (service.existsUserName(data.getUsername())) {                mess.setCode(Constant.RESPONSE_CODE.DUPLICATE_USERNAME);                mess.setStatus(Constant.RESPONSE_STATUS.ERROR);                return new ResponseEntity(mess, HttpStatus.OK);            }            data.setUpdateTime(new Date());            service.save(data);            return new ResponseEntity(mess, HttpStatus.OK);        } catch (Exception e) {            logger.error(e.getMessage(), e);            return new ResponseEntity(mess.error(e), HttpStatus.OK);        } finally {            logger.info(" user: "                    + SecurityContextHolder.getContext().getAuthentication().getName() + Constant.LOG.END);        }    }    @RequestMapping(value = {"/resetPass"}, method = RequestMethod.POST)    @PreAuthorize("apiSecured(#headers, '" + Constant.PERMISSION.ADMIN + "', '" + Constant.PRIVILEGE.ADMIN + "')")    public @ResponseBody    ResponseEntity<?> resetPass(@RequestHeader HttpHeaders headers, @RequestBody AdUser data) {        logger.info(" user: "                + SecurityContextHolder.getContext().getAuthentication().getName() + Constant.LOG.BEGIN);        MessagesResponse mess = new MessagesResponse();        try {            if (!service.exists(data.getUserId())) {                mess.setCode(Constant.RESPONSE_CODE.NOT_EXISTS);                mess.setStatus(Constant.RESPONSE_STATUS.ERROR);                return new ResponseEntity(mess, HttpStatus.OK);            }            data.setUpdateTime(new Date());            service.save(data);            return new ResponseEntity(mess, HttpStatus.OK);        } catch (Exception e) {            logger.error(e.getMessage(), e);            return new ResponseEntity(mess.error(e), HttpStatus.OK);        } finally {            logger.info(" user: "                    + SecurityContextHolder.getContext().getAuthentication().getName() + Constant.LOG.END);        }    }    @RequestMapping(value = {"/update"}, method = RequestMethod.POST)    @PreAuthorize("apiSecured(#headers, '" + Constant.PERMISSION.ADMIN + "', '" + Constant.PRIVILEGE.ADMIN + "')")    public @ResponseBody    ResponseEntity<?> update(@RequestHeader HttpHeaders headers, @RequestBody AdUser data) {        logger.info(" user: "                + SecurityContextHolder.getContext().getAuthentication().getName() + Constant.LOG.BEGIN);        MessagesResponse mess = new MessagesResponse();        try {            if (!service.exists(data.getUserId())) {                mess.setCode(Constant.RESPONSE_CODE.NOT_EXISTS);                mess.setStatus(Constant.RESPONSE_STATUS.ERROR);                return new ResponseEntity(mess, HttpStatus.OK);            } else if (!service.findOne(data.getUserId()).getStatus().equals(data.getStatus())) {                if (service.existsUserName(data.getUsername())) {                    mess.setCode(Constant.RESPONSE_CODE.DUPLICATE_USERNAME_ACTIVE);                    mess.setStatus(Constant.RESPONSE_STATUS.ERROR);                    return new ResponseEntity(mess, HttpStatus.OK);                }            }            if (service.existsEmail(data.getEmail(), data.getUsername())) {                mess.setCode(Constant.RESPONSE_CODE.DUPLICATE_EMAIL);                mess.setStatus(Constant.RESPONSE_STATUS.ERROR);                return new ResponseEntity(mess, HttpStatus.OK);            }            AdUser adUser = service.findOne(data.getUserId());            data.setPass(adUser.getPass());            data.setUpdateTime(new Date());            service.save(data);            return new ResponseEntity(mess, HttpStatus.OK);        } catch (Exception e) {            logger.error(e.getMessage(), e);            return new ResponseEntity(mess.error(e), HttpStatus.OK);        } finally {            logger.info(" user: "                    + SecurityContextHolder.getContext().getAuthentication().getName() + Constant.LOG.END);        }    }    @RequestMapping(value = {"/getByCondition"}, method = RequestMethod.POST)    @PreAuthorize("apiSecured(#headers, '" + Constant.PERMISSION.ADMIN + "', '" + Constant.PRIVILEGE.ADMIN + "')")    public @ResponseBody    ResponseEntity<?> getByCondition(@RequestHeader HttpHeaders headers, @RequestBody Map map) {        logger.info(" user: "                + SecurityContextHolder.getContext().getAuthentication().getName() + Constant.LOG.BEGIN);        MessagesResponse mess = new MessagesResponse();        try {            mess.setData(service.getByCondition(map));            return new ResponseEntity(mess, HttpStatus.OK);        } catch (Exception e) {            logger.error(e.getMessage(), e);            return new ResponseEntity(mess.error(e), HttpStatus.OK);        } finally {            logger.info(" user: "                    + SecurityContextHolder.getContext().getAuthentication().getName() + Constant.LOG.END);        }    }}