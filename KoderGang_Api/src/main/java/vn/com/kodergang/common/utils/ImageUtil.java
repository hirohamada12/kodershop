package vn.com.kodergang.common.utils;import org.springframework.stereotype.Component;import sun.misc.BASE64Decoder;import sun.misc.BASE64Encoder;import vn.com.kodergang.shop.Constant;import javax.imageio.ImageIO;import java.awt.*;import java.awt.image.BufferedImage;import java.io.ByteArrayInputStream;import java.io.ByteArrayOutputStream;import java.io.File;import java.io.IOException;import java.util.Date;@Componentpublic class ImageUtil {    public static String readThumbnailImage(String folderPath, String imagePath) {        if (!StringUtil.stringIsNullOrEmty(imagePath)) {            String ext = imagePath.substring(imagePath.lastIndexOf("."));            String fileName = imagePath.substring(0, imagePath.lastIndexOf("."));            fileName = fileName + Constant.THUMBNAIL + ext;            return readImage(folderPath, fileName);        }        return null;    }    public static String readImage(String folderPath, String fileName) {        if (StringUtil.stringIsNullOrEmty(fileName)) {            return "";        }        String fullPath = folderPath + fileName;        String imageString = "data:image/png;base64,";        File file = new File(fullPath);        ByteArrayOutputStream bos = new ByteArrayOutputStream();        try {            BufferedImage image = ImageIO.read(file);            ImageIO.write(image, fullPath.substring(fullPath.lastIndexOf(".") + 1), bos);            byte[] imageBytes = bos.toByteArray();            BASE64Encoder encoder = new BASE64Encoder();            imageString = imageString + encoder.encode(imageBytes);            bos.close();        } catch (IOException e) {            return "";        }        return imageString;    }    public static BufferedImage resizeImage(Image image, int width, int height, int sizeThumbnail) {        if (width > height) {            height = (height * sizeThumbnail) / width;            width = sizeThumbnail;        } else {            width = (width * sizeThumbnail) / height;            height = sizeThumbnail;        }        BufferedImage bufferedImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);        Graphics2D graphics2D = bufferedImage.createGraphics();        graphics2D.setComposite(AlphaComposite.Src);        graphics2D.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);        graphics2D.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);        graphics2D.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);        graphics2D.drawImage(image, 0, 0, width, height, null);        graphics2D.dispose();        return bufferedImage;    }    public static String writeImage(String imageBase64, String fileName, String folderPath, int sizeThumbnail) {        imageBase64 = imageBase64.replaceAll("^data:image(.*);base64,([\\s\\S]+)", "$2");        String folder = DateUtil.dateToString(new Date(), DateUtil.FORMAT_DATE3);        String formatType = "png";        fileName = fileName.substring(0, fileName.lastIndexOf(".")) + "_" + DateUtil.dateToString(new Date(), DateUtil.FORMAT_TIME2) + "." + formatType;        BASE64Decoder decoder = new BASE64Decoder();        BufferedImage image = null;        File outputfile = null;        byte[] imageByte;        try {            imageByte = decoder.decodeBuffer(imageBase64);            ByteArrayInputStream bis = new ByteArrayInputStream(imageByte);            image = ImageIO.read(bis);            bis.close();            outputfile = new File(folderPath + folder);            if (!outputfile.exists()) {                outputfile.mkdirs();            }            outputfile = new File(folderPath + folder + "/" + fileName);            if (StringUtil.stringIsNullOrEmty(image)) {                return "";            }            ImageIO.write(image, formatType, outputfile);            String thumbal = fileName.substring(0, fileName.lastIndexOf(".")) + Constant.THUMBNAIL + "." + formatType;            outputfile = new File(folderPath + folder + "/" + thumbal);            image = resizeImage(image, image.getWidth(), image.getHeight(), sizeThumbnail);            ImageIO.write(image, formatType, outputfile);        } catch (IOException e) {            e.printStackTrace();        }        return folder + "/" + fileName;    }}